blogdown::serve_site()
blogdown::serve_site()
linelist_raw <- read.csv("linelist_raw.csv")
linelist_raw <- gen_data("AJS")
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = FALSE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
## DELETE THIS LINE --- YOU READ IN YOUR OWN DATA ABOVE!
linelist_raw <- gen_data("AJS") # generates a fake dataset for use as an example in this template
nrow(linelist_raw)
nrow(linelist_raw$age_years)
length(linelist_raw$age_years)
# Silently read AJS example dataset
library(sitrep)
library(dplyr)
linelist_raw <- gen_data("AJS")
linelist_cleaned <- linelist_raw
summary(linelist_raw$age_years)
## create an age group variable by specifying categorical breaks
linelist_cleaned$age_group <- age_categories(linelist_cleaned$age_years,
breakers = c(0, 3, 15, 30, 45))
# Creates a descriptive table by specifying the dataframe and two columns
tab_linelist(x = linelist_cleaned, "age_group", strata = "sex")
#descriptive(df = linelist_cleaned, counter = "age_group", grouper = "sex")
# Creates a descriptive table by specifying the dataframe and two columns
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "sex")
#tab_linelist(x = linelist_cleaned, "age_group", strata = "sex")
#descriptive(df = linelist_cleaned, counter = "age_group", grouper = "sex")
# Creates a descriptive table by specifying the dataframe and two columns
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "fever")
#tab_linelist(x = linelist_cleaned, "age_group", strata = "sex")
#descriptive(df = linelist_cleaned, counter = "age_group", grouper = "sex")
# Creates a descriptive table by specifying the dataframe and two columns
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "vomiting")
#tab_linelist(x = linelist_cleaned, "age_group", strata = "sex")
#descriptive(df = linelist_cleaned, counter = "age_group", grouper = "sex")
# Creates a descriptive table by specifying the dataframe and two columns
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "recent_travel")
#tab_linelist(x = linelist_cleaned, "age_group", strata = "sex")
#descriptive(df = linelist_cleaned, counter = "age_group", grouper = "sex")
# Creates a descriptive table by specifying the dataframe and two columns
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "pregnant")
#tab_linelist(x = linelist_cleaned, "age_group", strata = "sex")
#descriptive(df = linelist_cleaned, counter = "age_group", grouper = "sex")
# Creates a descriptive table by specifying the dataframe and two columns
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "recent_travel")
#tab_linelist(x = linelist_cleaned, "age_group", strata = "sex")
#descriptive(df = linelist_cleaned, counter = "age_group", grouper = "sex")
# Creates an age pyramid by specifying the dataframe, age group variable, and a group variable
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group")
# Creates an age pyramid by specifying the dataframe, age group variable, and a group variable
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "recent_travel")
table(linelist_cleaned$sex, useNA = "always")
# Silently read AJS example dataset
library(sitrep)
library(dplyr)
linelist_raw <- gen_data("AJS")
linelist_cleaned <- linelist_raw
linelist_cleaned$sex[linelist_cleaned$sex == "U"] <- NA
# Creates an age pyramid by specifying the dataframe, age group variable, and a variable to split the pyramid
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "sex")
View(linelist_cleaned)
# Silently read AJS example dataset
library(sitrep)
library(dplyr)
linelist_raw <- gen_data("AJS")
linelist_cleaned <- linelist_raw
#Clean sex for age pyramid graphic
linelist_cleaned$sex[linelist_cleaned$sex == "U"] <- NA
#Create age groups for pyramid graphic
linelist_cleaned$age_group <- age_categories(linelist_cleaned$age_years,
breakers = c(0, 3, 15, 30, 45))
# Creates an age pyramid by specifying the dataframe, age group variable, and a variable to split the pyramid
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "sex")
View(linelist_cleaned)
View(linelist_cleaned)
table(linelist_cleaned$sex)
# Silently read AJS example dataset
library(sitrep)
library(dplyr)
linelist_raw <- gen_data("AJS")
linelist_cleaned <- linelist_raw
#Clean sex for age pyramid graphic
linelist_cleaned$sex[linelist_cleaned$sex == "U"] <- NA
linelist_cleaned$sex <- factor(linelist_cleaned$sex)
#Create age groups for pyramid graphic
linelist_cleaned$age_group <- age_categories(linelist_cleaned$age_years,
breakers = c(0, 3, 15, 30, 45))
# Creates an age pyramid by specifying the dataframe, age group variable, and a variable to split the pyramid
plot_age_pyramid(data = linelist_cleaned, age_group = "age_group", split_by = "sex")
# This command will produce the same table as above
plot_age_pyramid(linelist_cleaned, "age_group", "sex")
plot_age_pyramid(linelist_cleaned, "age_group", "sex", stack_by = "recent_travel")
plot_age_pyramid(linelist_cleaned, "age_group", "sex", proportional = TRUE)
plot_age_pyramid(linelist_cleaned, "age_group", "sex", proportional = TRUE, pal = "Blues")
plot_age_pyramid(linelist_cleaned, "age_group", "sex", proportional = TRUE, pal = c("Red, Blue"))
plot_age_pyramid(linelist_cleaned, "age_group", "sex", proportional = TRUE, pal = BrBG)
plot_age_pyramid(linelist_cleaned, "age_group", "sex", proportional = TRUE, pal = "BrBG")
plot_age_pyramid(linelist_cleaned, "age_group", "sex", proportional = TRUE, pal = c("blue", "green"))
plot_age_pyramid(linelist_cleaned, "age_group", "sex", proportional = TRUE, pal = c("orange", "purple"))
blogdown::serve_site()
blogdown::serve_site()
blog]
blogdown::serve_site()
blogdown::new_content("training/R_Basics/Advanced_Functions.Rmd", kind = "page")
# Silently read AJS example dataset
library(sitrep)
library(here)
library(dplyr)
linelist_raw <- gen_data("AJS")
linelist_cleaned <- linelist_raw
#Clean sex for age pyramid graphic
linelist_cleaned$sex[linelist_cleaned$sex == "U"] <- NA
linelist_cleaned$sex <- factor(linelist_cleaned$sex)
#Create age groups for pyramid graphic
linelist_cleaned$age_group <- age_categories(linelist_cleaned$age_years,
breakers = c(0, 3, 15, 30, 45))
# This command tells you the folder path that "here" is current set to
here()
blogdown::new_content("training/R_basics/R_projects.Rmd", kind = "page")
