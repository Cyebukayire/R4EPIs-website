#  ebola_marburg                     =   , # TEXT               # (Not in dataset)
other_arthropod_transmitted_virus =   arbovpcr, # TEXT
#  other_pathogen                    =   , # TEXT               # (Not in dataset)
#  lab_comments                      =   , # TEXT               # (Not in dataset)
pregnant                          =   medpreg, # TEXT
trimester                         =   medpregtri, # TEXT
#  foetus_alive_at_admission         =   , # TEXT               # (Not in dataset)
#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
#  time_to_death                     =   , # TEXT               # (Not in dataset)
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =   block # TEXT
)
population_data_region <- rio::import("AJS_AmTiman_population_revised_for_template.xlsx", which="quartier")
# The old import command
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist")
# The revised import command (don't forget the comma between arguments!)
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist", na = ".")
# Find the number of observations missing date_of_admission
nrow(linelist_cleaned %>% filter(is.na(date_of_admission)))
# Use this is your dataset aligns with the data dictionary
# Creates list of date variables from the data dictionary
#DATEVARS <- filter(linelist_dict, data_element_valuetype == "DATE") %>%
#  select(data_element_shortname) # select date vars
# change to the date variables found in your dataset to class date
#linelist_cleaned <- linelist_cleaned %>%
#  mutate_at(DATEVARS$data_element_shortname, as.Date)
# Use this if your dataset does not align with the data dictionary
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(matches("date|Date")), linelist::guess_dates,
error_tolerance = 0.5)
# Individually convert other date columns
class(linelist_cleaned$dthospitalisation)
linelist_cleaned$dthospitalisation <- linelist::guess_dates(linelist_cleaned$dthospitalisation)
class(linelist_cleaned$dthospitalisation)
# Repeat for variable "dtdeath"
linelist_cleaned$dtdeath <- linelist::guess_dates(linelist_cleaned$dtdeath)
# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA))
class(linelist_cleaned$date_of_onset)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset < as.Date("2016-04-01")  ~ NA,
date_of_onset > as.Date("2017-10-31")  ~ NA)
as.Date("2016-04-01")
as.Date("2017-10-31")
date_of_onset[1] < as.Date("2016-04-01")
linelist_cleaned$date_of_onset[1] < as.Date("2016-04-01")
linelist_cleaned$date_of_onset[2] < as.Date("2016-04-01")
linelist_cleaned$date_of_onset[2]
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA))
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset = case_when(
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA)
)
)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset < as.Date("2017-11-01")  ~ as.Date(NA),
date_of_onset == as.Date("2081-01-01") ~ as.Date("2018-01-01"))
range(linelist_cleaned$date_of_onset, na.rm=T)
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
reporting_week <- "2017-W52"  # Set the reporting week
date2week(Sys.Date())      #Sys.Date() uses the current date from your computer
# This code chunk runs in the background and actually imports the dataset while transforming "." to NA.
# The import code chunk above (with eval=FALSE) does not run, but shows the viewer the default import code.
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist", na=".")
## make a copy of your orginal dataset and name it linelist_cleaned
linelist_cleaned <- linelist_raw
# Store cleaned column names
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# Overwrite variable column names with clean ones
colnames(linelist_cleaned) <- cleaned_colnames
## Add the appropriate column names after the equals signs
linelist_cleaned <- rename(linelist_cleaned,
#  event_file_type                   =   , # TEXT                # (Not in dataset)
case_number                       =   hevid, # TEXT
date_of_admission                 =   dtmedical, # DATE
detected_by                       =   referredby, # TEXT
patient_facility_type             =   hospitalised, # TEXT
#  msf_involvement                   =   , # TEXT                # (Not in dataset)
age_years                         =   age, # INTEGER_POSITIVE
#  age_months                        =   , # INTEGER_POSITIVE   # (Dataset only has years)
#  age_days                          =   , # INTEGER_POSITIVE   # (Dataset only has years)
sex                               =   sex, # TEXT
patient_origin                    =   quartier, # ORG UNIT
#  residential_status_brief          =   , # TEXT               # (Not in dataset)
#  arrival_date_in_area_if_3m        =   , # DATE               # (Not in dataset)
#  ever_received_hepatitis_e_vaccine =   , # TEXT               # (Not in dataset)
#  date_of_last_vaccination          =   , # DATE               # (Not in dataset)
date_of_onset                     =   dtjaundice, # DATE
#  history_of_fever                  =   , # BOOLEAN            # (Not in dataset)
fever                             =   medfever, # BOOLEAN
nausea_anorexia                   =   mednausea, # BOOLEAN
vomiting                          =   medvomit, # BOOLEAN
epigastric_pain_heartburn         =   medepigastric, # BOOLEAN
generalized_itch                  =   meditching, # BOOLEAN
headache                          =   medheadache, # BOOLEAN
joint_pains                       =   medarthralgia, # BOOLEAN
diarrhoea                         =   meddiar, # BOOLEAN
bleeding                          =   medbleeding, # BOOLEAN
#  convulsions                       =   , # BOOLEAN            # (Not in dataset)
mental_state                      =   medmental, # BOOLEAN    # !(Needs value cleaning)
other_symptoms                    =   medother, # BOOLEAN
other_cases_in_hh                 =   medothhhajs, # BOOLEAN
#  traditional_medicines             =   , # BOOLEAN            # (Not in dataset)
#  traditional_medicine_details      =   , # TEXT               # (Not in dataset)
#  recent_travel                     =   , # BOOLEAN            # (Not in dataset)
#  water_source                      =   , # TEXT               # !(Split across many variables)
malaria_rdt_at_admission          =   medmalrdt, # TEXT
hep_b_rdt                         =   medhepb, # TEXT
hep_c_rdt                         =   medhepc, # TEXT
hep_e_rdt                         =   medhevrdt, # TEXT
#  dengue_rdt                        =   , # TEXT               # (Not in dataset)
date_lab_sample_taken             =   medblooddt, # DATE
test_hepatitis_a                  =   medhavelisa, # TEXT
test_hepatitis_b                  =   medhbvelisa, # TEXT
test_hepatitis_c                  =   medhcvelisa, # TEXT
test_hepatitis_e_virus            =   medhevelisa, # TEXT
test_hepatitis_e_igm              =   hevrecent, # TEXT
#  test_hepatitis_e_igg              =   , # TEXT               # (In same variable as elisa result)
test_hepatitis_e_genotype         =   hevgenotype, # TEXT
#  malaria_blood_film                =   , # TEXT               # (Not in dataset)
dengue                            =   dengue, # TEXT
yellow_fever                      =   yf, # TEXT
#  lassa_fever                       =   , # TEXT               # (Not in dataset)
#  typhoid                           =   , # TEXT               # (Not in dataset)
chikungunya_onyongnyong           =   chik, # TEXT
#  ebola_marburg                     =   , # TEXT               # (Not in dataset)
other_arthropod_transmitted_virus =   arbovpcr, # TEXT
#  other_pathogen                    =   , # TEXT               # (Not in dataset)
#  lab_comments                      =   , # TEXT               # (Not in dataset)
pregnant                          =   medpreg, # TEXT
trimester                         =   medpregtri, # TEXT
#  foetus_alive_at_admission         =   , # TEXT               # (Not in dataset)
#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
#  time_to_death                     =   , # TEXT               # (Not in dataset)
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =   block # TEXT
)
population_data_region <- rio::import("AJS_AmTiman_population_revised_for_template.xlsx", which="quartier")
# Use this is your dataset aligns with the data dictionary
# Creates list of date variables from the data dictionary
#DATEVARS <- filter(linelist_dict, data_element_valuetype == "DATE") %>%
#  select(data_element_shortname) # select date vars
# change to the date variables found in your dataset to class date
#linelist_cleaned <- linelist_cleaned %>%
#  mutate_at(DATEVARS$data_element_shortname, as.Date)
# Use this if your dataset does not align with the data dictionary
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(matches("date|Date")), linelist::guess_dates,
error_tolerance = 0.5)
# Individually convert other date columns
class(linelist_cleaned$dthospitalisation)
linelist_cleaned$dthospitalisation <- linelist::guess_dates(linelist_cleaned$dthospitalisation)
class(linelist_cleaned$dthospitalisation)
# Repeat for variable "dtdeath"
linelist_cleaned$dtdeath <- linelist::guess_dates(linelist_cleaned$dtdeath)
# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset = case_when(
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA)
)
)
# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
reporting_week <- "2017-W52"  # Set the reporting week
date2week(Sys.Date())      #Sys.Date() uses the current date from your computer
# This code chunk runs in the background and actually imports the dataset while transforming "." to NA.
# The import code chunk above (with eval=FALSE) does not run, but shows the viewer the default import code.
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist", na=".")
## make a copy of your orginal dataset and name it linelist_cleaned
linelist_cleaned <- linelist_raw
# Store cleaned column names
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# Overwrite variable column names with clean ones
colnames(linelist_cleaned) <- cleaned_colnames
## Add the appropriate column names after the equals signs
linelist_cleaned <- rename(linelist_cleaned,
#  event_file_type                   =   , # TEXT                # (Not in dataset)
case_number                       =   hevid, # TEXT
date_of_admission                 =   dtmedical, # DATE
detected_by                       =   referredby, # TEXT
patient_facility_type             =   hospitalised, # TEXT
#  msf_involvement                   =   , # TEXT                # (Not in dataset)
age_years                         =   age, # INTEGER_POSITIVE
#  age_months                        =   , # INTEGER_POSITIVE   # (Dataset only has years)
#  age_days                          =   , # INTEGER_POSITIVE   # (Dataset only has years)
sex                               =   sex, # TEXT
patient_origin                    =   quartier, # ORG UNIT
#  residential_status_brief          =   , # TEXT               # (Not in dataset)
#  arrival_date_in_area_if_3m        =   , # DATE               # (Not in dataset)
#  ever_received_hepatitis_e_vaccine =   , # TEXT               # (Not in dataset)
#  date_of_last_vaccination          =   , # DATE               # (Not in dataset)
date_of_onset                     =   dtjaundice, # DATE
#  history_of_fever                  =   , # BOOLEAN            # (Not in dataset)
fever                             =   medfever, # BOOLEAN
nausea_anorexia                   =   mednausea, # BOOLEAN
vomiting                          =   medvomit, # BOOLEAN
epigastric_pain_heartburn         =   medepigastric, # BOOLEAN
generalized_itch                  =   meditching, # BOOLEAN
headache                          =   medheadache, # BOOLEAN
joint_pains                       =   medarthralgia, # BOOLEAN
diarrhoea                         =   meddiar, # BOOLEAN
bleeding                          =   medbleeding, # BOOLEAN
#  convulsions                       =   , # BOOLEAN            # (Not in dataset)
mental_state                      =   medmental, # BOOLEAN    # !(Needs value cleaning)
other_symptoms                    =   medother, # BOOLEAN
other_cases_in_hh                 =   medothhhajs, # BOOLEAN
#  traditional_medicines             =   , # BOOLEAN            # (Not in dataset)
#  traditional_medicine_details      =   , # TEXT               # (Not in dataset)
#  recent_travel                     =   , # BOOLEAN            # (Not in dataset)
#  water_source                      =   , # TEXT               # !(Split across many variables)
malaria_rdt_at_admission          =   medmalrdt, # TEXT
hep_b_rdt                         =   medhepb, # TEXT
hep_c_rdt                         =   medhepc, # TEXT
hep_e_rdt                         =   medhevrdt, # TEXT
#  dengue_rdt                        =   , # TEXT               # (Not in dataset)
date_lab_sample_taken             =   medblooddt, # DATE
test_hepatitis_a                  =   medhavelisa, # TEXT
test_hepatitis_b                  =   medhbvelisa, # TEXT
test_hepatitis_c                  =   medhcvelisa, # TEXT
test_hepatitis_e_virus            =   medhevelisa, # TEXT
test_hepatitis_e_igm              =   hevrecent, # TEXT
#  test_hepatitis_e_igg              =   , # TEXT               # (In same variable as elisa result)
test_hepatitis_e_genotype         =   hevgenotype, # TEXT
#  malaria_blood_film                =   , # TEXT               # (Not in dataset)
dengue                            =   dengue, # TEXT
yellow_fever                      =   yf, # TEXT
#  lassa_fever                       =   , # TEXT               # (Not in dataset)
#  typhoid                           =   , # TEXT               # (Not in dataset)
chikungunya_onyongnyong           =   chik, # TEXT
#  ebola_marburg                     =   , # TEXT               # (Not in dataset)
other_arthropod_transmitted_virus =   arbovpcr, # TEXT
#  other_pathogen                    =   , # TEXT               # (Not in dataset)
#  lab_comments                      =   , # TEXT               # (Not in dataset)
pregnant                          =   medpreg, # TEXT
trimester                         =   medpregtri, # TEXT
#  foetus_alive_at_admission         =   , # TEXT               # (Not in dataset)
#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
#  time_to_death                     =   , # TEXT               # (Not in dataset)
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =   block # TEXT
)
population_data_region <- rio::import("AJS_AmTiman_population_revised_for_template.xlsx", which="quartier")
# Use this is your dataset aligns with the data dictionary
# Creates list of date variables from the data dictionary
#DATEVARS <- filter(linelist_dict, data_element_valuetype == "DATE") %>%
#  select(data_element_shortname) # select date vars
# change to the date variables found in your dataset to class date
#linelist_cleaned <- linelist_cleaned %>%
#  mutate_at(DATEVARS$data_element_shortname, as.Date)
# Use this if your dataset does not align with the data dictionary
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(matches("date|Date")), linelist::guess_dates,
error_tolerance = 0.5)
# Individually convert other date columns
class(linelist_cleaned$dthospitalisation)
linelist_cleaned$dthospitalisation <- linelist::guess_dates(linelist_cleaned$dthospitalisation)
class(linelist_cleaned$dthospitalisation)
# Repeat for variable "dtdeath"
linelist_cleaned$dtdeath <- linelist::guess_dates(linelist_cleaned$dtdeath)
# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA)
)
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
reporting_week <- "2017-W52"  # Set the reporting week
date2week(Sys.Date())      #Sys.Date() uses the current date from your computer
# This code chunk runs in the background and actually imports the dataset while transforming "." to NA.
# The import code chunk above (with eval=FALSE) does not run, but shows the viewer the default import code.
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist", na=".")
## make a copy of your orginal dataset and name it linelist_cleaned
linelist_cleaned <- linelist_raw
# Store cleaned column names
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# Overwrite variable column names with clean ones
colnames(linelist_cleaned) <- cleaned_colnames
## Add the appropriate column names after the equals signs
linelist_cleaned <- rename(linelist_cleaned,
#  event_file_type                   =   , # TEXT                # (Not in dataset)
case_number                       =   hevid, # TEXT
date_of_admission                 =   dtmedical, # DATE
detected_by                       =   referredby, # TEXT
patient_facility_type             =   hospitalised, # TEXT
#  msf_involvement                   =   , # TEXT                # (Not in dataset)
age_years                         =   age, # INTEGER_POSITIVE
#  age_months                        =   , # INTEGER_POSITIVE   # (Dataset only has years)
#  age_days                          =   , # INTEGER_POSITIVE   # (Dataset only has years)
sex                               =   sex, # TEXT
patient_origin                    =   quartier, # ORG UNIT
#  residential_status_brief          =   , # TEXT               # (Not in dataset)
#  arrival_date_in_area_if_3m        =   , # DATE               # (Not in dataset)
#  ever_received_hepatitis_e_vaccine =   , # TEXT               # (Not in dataset)
#  date_of_last_vaccination          =   , # DATE               # (Not in dataset)
date_of_onset                     =   dtjaundice, # DATE
#  history_of_fever                  =   , # BOOLEAN            # (Not in dataset)
fever                             =   medfever, # BOOLEAN
nausea_anorexia                   =   mednausea, # BOOLEAN
vomiting                          =   medvomit, # BOOLEAN
epigastric_pain_heartburn         =   medepigastric, # BOOLEAN
generalized_itch                  =   meditching, # BOOLEAN
headache                          =   medheadache, # BOOLEAN
joint_pains                       =   medarthralgia, # BOOLEAN
diarrhoea                         =   meddiar, # BOOLEAN
bleeding                          =   medbleeding, # BOOLEAN
#  convulsions                       =   , # BOOLEAN            # (Not in dataset)
mental_state                      =   medmental, # BOOLEAN    # !(Needs value cleaning)
other_symptoms                    =   medother, # BOOLEAN
other_cases_in_hh                 =   medothhhajs, # BOOLEAN
#  traditional_medicines             =   , # BOOLEAN            # (Not in dataset)
#  traditional_medicine_details      =   , # TEXT               # (Not in dataset)
#  recent_travel                     =   , # BOOLEAN            # (Not in dataset)
#  water_source                      =   , # TEXT               # !(Split across many variables)
malaria_rdt_at_admission          =   medmalrdt, # TEXT
hep_b_rdt                         =   medhepb, # TEXT
hep_c_rdt                         =   medhepc, # TEXT
hep_e_rdt                         =   medhevrdt, # TEXT
#  dengue_rdt                        =   , # TEXT               # (Not in dataset)
date_lab_sample_taken             =   medblooddt, # DATE
test_hepatitis_a                  =   medhavelisa, # TEXT
test_hepatitis_b                  =   medhbvelisa, # TEXT
test_hepatitis_c                  =   medhcvelisa, # TEXT
test_hepatitis_e_virus            =   medhevelisa, # TEXT
test_hepatitis_e_igm              =   hevrecent, # TEXT
#  test_hepatitis_e_igg              =   , # TEXT               # (In same variable as elisa result)
test_hepatitis_e_genotype         =   hevgenotype, # TEXT
#  malaria_blood_film                =   , # TEXT               # (Not in dataset)
dengue                            =   dengue, # TEXT
yellow_fever                      =   yf, # TEXT
#  lassa_fever                       =   , # TEXT               # (Not in dataset)
#  typhoid                           =   , # TEXT               # (Not in dataset)
chikungunya_onyongnyong           =   chik, # TEXT
#  ebola_marburg                     =   , # TEXT               # (Not in dataset)
other_arthropod_transmitted_virus =   arbovpcr, # TEXT
#  other_pathogen                    =   , # TEXT               # (Not in dataset)
#  lab_comments                      =   , # TEXT               # (Not in dataset)
pregnant                          =   medpreg, # TEXT
trimester                         =   medpregtri, # TEXT
#  foetus_alive_at_admission         =   , # TEXT               # (Not in dataset)
#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
#  time_to_death                     =   , # TEXT               # (Not in dataset)
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =   block # TEXT
)
population_data_region <- rio::import("AJS_AmTiman_population_revised_for_template.xlsx", which="quartier")
# Use this is your dataset aligns with the data dictionary
# Creates list of date variables from the data dictionary
#DATEVARS <- filter(linelist_dict, data_element_valuetype == "DATE") %>%
#  select(data_element_shortname) # select date vars
# change to the date variables found in your dataset to class date
#linelist_cleaned <- linelist_cleaned %>%
#  mutate_at(DATEVARS$data_element_shortname, as.Date)
# Use this if your dataset does not align with the data dictionary
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(matches("date|Date")), linelist::guess_dates,
error_tolerance = 0.5)
# Individually convert other date columns
class(linelist_cleaned$dthospitalisation)
linelist_cleaned$dthospitalisation <- linelist::guess_dates(linelist_cleaned$dthospitalisation)
class(linelist_cleaned$dthospitalisation)
# Repeat for variable "dtdeath"
linelist_cleaned$dtdeath <- linelist::guess_dates(linelist_cleaned$dtdeath)
# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA),
TRUE                                   ~ date_of_onset
)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset = case_when(
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA),
TRUE                                   ~ date_of_onset
))
# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
