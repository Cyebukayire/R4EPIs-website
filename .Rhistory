#   # shape 21 allows fill variable and colour border (e.g. black ring around circle)
#   # size allows you to make it bigger
#   geom_sf(data = mapsub, aes(fill = categories), shape = 21, size = 5, color = "black") +
#   coord_sf(datum = NA) + # needed to avoid gridlines being drawn
#   annotation_scale() + # add a scalebar
#   scale_fill_viridis_d(drop = FALSE, option = "C") + # color the scale to be perceptually uniform
#   theme_void() # remove coordinates and axes
## Checklist for plotting in for-loop ------------------------------------------
## - [ ] decide if you would like to show counts, AR or categories of those
## - [ ] define appropriate breaks to ensure legend is uniform by week
## - [ ] replace `Cases (n)` and `AR (per 100,000)` or "categories", appropriately
## - [ ] consider facet wrapping by an overarching unit if have many regions (e.g. by province)
# change region variable to a factor so that zero counts can be included
linelist_cleaned$patient_origin <- as.factor(linelist_cleaned$patient_origin)
# case counts
cases <- linelist_cleaned %>%
group_by(epiweek) %>%
count(patient_origin, .drop = FALSE) %>%   # cases for each week by region
left_join(population_data_region, by = "patient_origin")    # merge population data
# attack rate for region
ar <- attack_rate(cases$n, cases$population, multiplier = 100000) %>%
# add the region column to table
bind_cols(select(cases, epiweek, patient_origin), .) %>%
rename("Region" = patient_origin,
"Cases (n)" = cases,
"Population" = population,
"AR (per 100,000)" = ar,
"Lower 95%CI" = lower,
"Upper 95%CI" = upper)
max_cases <- max(cases$n, na.rm = TRUE) # define the maximum number of cases for the color palette
max_ar    <- max(ar$`Upper 95%CI`, na.rm = TRUE)
## define breaks for standardising color palette
breakers <- as.integer(c(0, # include zero as a standalone group
find_breaks(max_ar, breaks = 4, snap = 100) # four breaks rounded to nearest 100
))
## add a categorical variable using the age_categories function
## nb in this case we arent using ages - but it functions the same way!
ar <- mutate(ar,
categories = age_categories(`AR (per 100,000)`,
breakers = breakers)
)
# go through each epiweek, fiter and plot the data
for (i in unique(cases$epiweek)) {
this_ar <- filter(ar, epiweek == i)
# map
mapsub <- left_join(map, this_ar, by = c("name" = "Region"))
# choropleth
map_plot <- ggplot() +
geom_sf(data = mapsub, aes(fill = categories), col = "grey50") + # shapefile as polygon
coord_sf(datum = NA) + # needed to avoid gridlines being drawn
annotation_scale() + # add a scalebar
scale_fill_viridis_d(drop = FALSE, option = "C",
name = "AR (per 100,000)") + # color the scale to be perceptually uniform (keep levels)
theme_void() # remove coordinates and axes
# plot with the region on the x axis sorted by increasing ar
# ar value on the y axis
barplot <- ggplot(this_ar, aes(x = reorder(Region, `AR (per 100,000)`),
y = `AR (per 100,000)`)) +
geom_bar(stat = "identity", col = "black", fill = "red") + # plot as bars (identity = as is)
geom_errorbar(aes(ymin = `Lower 95%CI`, ymax = `Upper 95%CI`), width = 0.2) + # add CIs
scale_y_continuous(expand = c(0, 0), limits = c(0, max_ar)) +  # set origin for axes
# add labels to axes and below chart
labs(x = "Region", y = "AR (per 100,000)",
captions = paste0("Source: MSF data from ", reporting_week)) +
epicurve_theme
# combine the barplot and map plot into one
print(
cowplot::plot_grid(
barplot + labs(title = paste0("Epiweek:", i)),
map_plot,
nrow = 1,
align = "h",
axis = "tb"
)
)
}
blogdown::new_content(training/AJS_Walkthrough_Cleaning)
blogdown::new_content("training/AJS_Walkthrough_Cleaning.Rmd", kind = "page")
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = FALSE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
# creates object linelist_dict using the msf_dict function from the sitrep package
# View the data dictionary by clicking
linelist_dict <- msf_dict("AJS", compact = FALSE) %>%
select(option_code, option_name, everything())
View(linelist_dict)
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("public/training/AJS_AmTiman", which = "linelist")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("/public/training/AJS_AmTiman", which = "linelist")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("/public/training/AJS_AmTiman.xlsx", which = "linelist")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("/public/training/AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("/static/data/AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("/data/AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("/data/AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("/data/AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- choose.files()
# linelist_raw <- rio::import("AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- choose.files()
# linelist_raw <- rio::import("AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- choose.files()
linelist_raw <- rio::import("AJS_AmTiman.xlsx")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx")
linelist_raw <- NA
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx")
View(linelist_raw)
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
# define clean variable names using clean_labels from the epitrix package
# this function is preset rules for variable naming
# for example it changes spaces and dots to "_" and characters to lowercase
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# overwrite variable names with defined clean names
# colnames(linelist_cleaned) <- cleaned_colnames
cleaned_colnames
msf_dict_rename_helper("AJS")
## make a copy of your orginal dataset and name it linelist_cleaned
linelist_cleaned <- linelist_raw
# define clean variable names using clean_labels from the epitrix package
# this function is preset rules for variable naming
# for example it changes spaces and dots to "_" and characters to lowercase
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# overwrite variable names with defined clean names
colnames(linelist_cleaned) <- cleaned_colnames
View(linelist_cleaned)
blogdown::serve_site()
blogdown::serve_site()
2+2
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist")
## make a copy of your orginal dataset and name it linelist_cleaned
linelist_cleaned <- linelist_raw
# define clean variable names using clean_labels from the epitrix package
# this function is preset rules for variable naming
# for example it changes spaces and dots to "_" and characters to lowercase
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# overwrite variable names with defined clean names
colnames(linelist_cleaned) <- cleaned_colnames
## Renaming variables to match the template -------------------------------
## OPTIONAL: below is just an example in case you want to specifically change a
## few names you can also change specific var names using the *rename*
## function. In this example, we have the columns "gender" and "age" that we
## want to rename as "sex" and "age_years".
## The formula for this is rename(data, NEW_NAME = OLD_NAME).
# linelist_cleaned <- rename(linelist_cleaned,
#                            gender    = sex, # TEXT
#                            age_years = age  # INTEGER_POSITIVE
# )
## Add the appropriate column names after the equals signs
linelist_cleaned <- rename(linelist_cleaned,
#  event_file_type                   =   , # TEXT                # (Not in dataset)
case_number                       =   hevid, # TEXT
date_of_admission                 =   dtmedical, # DATE
detected_by                       =   referredby, # TEXT
# patient_facility_type             =   , # TEXT                # (Not in dataset)
msf_involvement                   =   , # TEXT                # (Not in dataset)
age_years                         =   age, # INTEGER_POSITIVE
#  age_months                        =   , # INTEGER_POSITIVE   # (Dataset only has years)
#  age_days                          =   , # INTEGER_POSITIVE   # (Dataset only has years)
sex                               =   sex, # TEXT
patient_origin                    =   quartier, # ORG UNIT
#  residential_status_brief          =   , # TEXT               # (Not in dataset)
#  arrival_date_in_area_if_3m        =   , # DATE               # (Not in dataset)
#  ever_received_hepatitis_e_vaccine =   , # TEXT               # (Not in dataset)
#  date_of_last_vaccination          =   , # DATE               # (Not in dataset)
date_of_onset                     =   dtjaundice, # DATE
#  history_of_fever                  =   , # BOOLEAN            # (Not in dataset)
fever                             =   medfever, # BOOLEAN
nausea_anorexia                   =   mednausea, # BOOLEAN
vomiting                          =   medvomit, # BOOLEAN
epigastric_pain_heartburn         =   medepigastric, # BOOLEAN
generalized_itch                  =   meditching, # BOOLEAN
headache                          =   medheadache, # BOOLEAN
joint_pains                       =   medarthralgia, # BOOLEAN
diarrhoea                         =   meddiar, # BOOLEAN
bleeding                          =   medbleeding, # BOOLEAN
#  convulsions                       =   , # BOOLEAN            # (Not in dataset)
mental_state                      =   medmental, # BOOLEAN    # !(Needs value cleaning)
other_symptoms                    =   medother, # BOOLEAN
other_cases_in_hh                 =   medothhhajs, # BOOLEAN
#  traditional_medicines             =   , # BOOLEAN            # (Not in dataset)
#  traditional_medicine_details      =   , # TEXT               # (Not in dataset)
#  recent_travel                     =   , # BOOLEAN            # (Not in dataset)
#  water_source                      =   , # TEXT               # !(Split across many variables)
malaria_rdt_at_admission          =   medmalrdt, # TEXT
hep_b_rdt                         =   medhepb, # TEXT
hep_c_rdt                         =   medhepc, # TEXT
hep_e_rdt                         =   medhevrdt, # TEXT
#  dengue_rdt                        =   , # TEXT               # (Not in dataset)
date_lab_sample_taken             =   medblooddt, # DATE
test_hepatitis_a                  =   medhavelisa, # TEXT
test_hepatitis_b                  =   medhbvelisa, # TEXT
test_hepatitis_c                  =   medhcvelisa, # TEXT
test_hepatitis_e_virus            =   medhevelisa, # TEXT
test_hepatitis_e_igm              =   hevrecent, # TEXT
#  test_hepatitis_e_igg              =   , # TEXT               # (In same variable as elisa result)
test_hepatitis_e_genotype         =   hevgenotype, # TEXT
#  malaria_blood_film                =   , # TEXT               # (Not in dataset)
dengue                            =   dengue, # TEXT
yellow_fever                      =   yf, # TEXT
#  lassa_fever                       =   , # TEXT               # (Not in dataset)
#  typhoid                           =   , # TEXT               # (Not in dataset)
chikungunya_onyongnyong           =   chik, # TEXT
#  ebola_marburg                     =   , # TEXT               # (Not in dataset)
other_arthropod_transmitted_virus =   arbovpcr, # TEXT
#  other_pathogen                    =   , # TEXT               # (Not in dataset)
#  lab_comments                      =   , # TEXT               # (Not in dataset)
pregnant                          =   medpreg, # TEXT
trimester                         =   medpregtri, # TEXT
#  foetus_alive_at_admission         =   , # TEXT               # (Not in dataset)
#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
time_to_death                     =   dtdeath, # TEXT
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =    block # TEXT
)
View(linelist_cleaned)
linelist_cleaned <- rename(linelist_cleaned,
#  event_file_type                   =   , # TEXT                # (Not in dataset)
case_number                       =   hevid)
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
## Read data ------------------------------------
# Excel file
# to read in a specific sheet use "which"
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist")
## make a copy of your orginal dataset and name it linelist_cleaned
linelist_cleaned <- linelist_raw
# define clean variable names using clean_labels from the epitrix package
# this function is preset rules for variable naming
# for example it changes spaces and dots to "_" and characters to lowercase
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# overwrite variable names with defined clean names
colnames(linelist_cleaned) <- cleaned_colnames
## Renaming variables to match the template -------------------------------
## OPTIONAL: below is just an example in case you want to specifically change a
## few names you can also change specific var names using the *rename*
## function. In this example, we have the columns "gender" and "age" that we
## want to rename as "sex" and "age_years".
## The formula for this is rename(data, NEW_NAME = OLD_NAME).
# linelist_cleaned <- rename(linelist_cleaned,
#                            gender    = sex, # TEXT
#                            age_years = age  # INTEGER_POSITIVE
# )
## Add the appropriate column names after the equals signs
linelist_cleaned <- rename(linelist_cleaned,
#  event_file_type                   =   , # TEXT                # (Not in dataset)
case_number                       =   hevid, # TEXT
date_of_admission                 =   dtmedical, # DATE
detected_by                       =   referredby, # TEXT
# patient_facility_type             =   , # TEXT                # (Not in dataset)
#  msf_involvement                   =   , # TEXT                # (Not in dataset)
age_years                         =   age, # INTEGER_POSITIVE
#  age_months                        =   , # INTEGER_POSITIVE   # (Dataset only has years)
#  age_days                          =   , # INTEGER_POSITIVE   # (Dataset only has years)
sex                               =   sex, # TEXT
patient_origin                    =   quartier, # ORG UNIT
#  residential_status_brief          =   , # TEXT               # (Not in dataset)
#  arrival_date_in_area_if_3m        =   , # DATE               # (Not in dataset)
#  ever_received_hepatitis_e_vaccine =   , # TEXT               # (Not in dataset)
#  date_of_last_vaccination          =   , # DATE               # (Not in dataset)
date_of_onset                     =   dtjaundice, # DATE
#  history_of_fever                  =   , # BOOLEAN            # (Not in dataset)
fever                             =   medfever, # BOOLEAN
nausea_anorexia                   =   mednausea, # BOOLEAN
vomiting                          =   medvomit, # BOOLEAN
epigastric_pain_heartburn         =   medepigastric, # BOOLEAN
generalized_itch                  =   meditching, # BOOLEAN
headache                          =   medheadache, # BOOLEAN
joint_pains                       =   medarthralgia, # BOOLEAN
diarrhoea                         =   meddiar, # BOOLEAN
bleeding                          =   medbleeding, # BOOLEAN
#  convulsions                       =   , # BOOLEAN            # (Not in dataset)
mental_state                      =   medmental, # BOOLEAN    # !(Needs value cleaning)
other_symptoms                    =   medother, # BOOLEAN
other_cases_in_hh                 =   medothhhajs, # BOOLEAN
#  traditional_medicines             =   , # BOOLEAN            # (Not in dataset)
#  traditional_medicine_details      =   , # TEXT               # (Not in dataset)
#  recent_travel                     =   , # BOOLEAN            # (Not in dataset)
#  water_source                      =   , # TEXT               # !(Split across many variables)
malaria_rdt_at_admission          =   medmalrdt, # TEXT
hep_b_rdt                         =   medhepb, # TEXT
hep_c_rdt                         =   medhepc, # TEXT
hep_e_rdt                         =   medhevrdt, # TEXT
#  dengue_rdt                        =   , # TEXT               # (Not in dataset)
date_lab_sample_taken             =   medblooddt, # DATE
test_hepatitis_a                  =   medhavelisa, # TEXT
test_hepatitis_b                  =   medhbvelisa, # TEXT
test_hepatitis_c                  =   medhcvelisa, # TEXT
test_hepatitis_e_virus            =   medhevelisa, # TEXT
test_hepatitis_e_igm              =   hevrecent, # TEXT
#  test_hepatitis_e_igg              =   , # TEXT               # (In same variable as elisa result)
test_hepatitis_e_genotype         =   hevgenotype, # TEXT
#  malaria_blood_film                =   , # TEXT               # (Not in dataset)
dengue                            =   dengue, # TEXT
yellow_fever                      =   yf, # TEXT
#  lassa_fever                       =   , # TEXT               # (Not in dataset)
#  typhoid                           =   , # TEXT               # (Not in dataset)
chikungunya_onyongnyong           =   chik, # TEXT
#  ebola_marburg                     =   , # TEXT               # (Not in dataset)
other_arthropod_transmitted_virus =   arbovpcr, # TEXT
#  other_pathogen                    =   , # TEXT               # (Not in dataset)
#  lab_comments                      =   , # TEXT               # (Not in dataset)
pregnant                          =   medpreg, # TEXT
trimester                         =   medpregtri, # TEXT
#  foetus_alive_at_admission         =   , # TEXT               # (Not in dataset)
#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
time_to_death                     =   dtdeath, # TEXT
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =   block # TEXT
)
blogdown::serve_site()
msf_dict_rename_helper("AJS")
