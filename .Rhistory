#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
#  time_to_death                     =   , # TEXT               # (Not in dataset)
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =   block # TEXT
)
table(linelist_cleaned$patient_facility_type)
# creates object linelist_dict using the msf_dict function from the sitrep package
linelist_dict <- msf_dict("AJS", compact = FALSE) %>%
select(option_code, option_name, everything())
View(linelist_dict)
linelist_cleaned <- linelist_cleaned %>%
mutate(patient_facility_type = case_when(
"Oui" ~ "Inpatient",
"Non" ~ "Outpatient"
))
linelist_cleaned <- linelist_cleaned %>%
mutate(patient_facility_type = case_when(
patient_facility_type == "Oui" ~ "Inpatient",
patient_facility_type == "Non" ~ "Outpatient"
))
table(linelist_cleaned$patient_facility_type, useNA = "always")
linelist_cleaned <- linelist_cleaned %>%
mutate(patient_facility_type = case_when(
patient_facility_type == "Oui" ~ "Inpatient",
patient_facility_type == "Non" ~ NA
))
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
reporting_week <- "2017-W52"  # Set the reporting week
# This code chunk runs in the background and actually imports the dataset while transforming "." to NA.
# The import code chunk above (with eval=FALSE) does not run, but shows the viewer the default import code.
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist", na=".")
## make a copy of your orginal dataset and name it linelist_cleaned
linelist_cleaned <- linelist_raw
# this function is preset rules for variable naming
# for example it changes spaces and dots to "_" and characters to lowercase
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# overwrite variable names with defined clean names
colnames(linelist_cleaned) <- cleaned_colnames
## Add the appropriate column names after the equals signs
linelist_cleaned <- rename(linelist_cleaned,
#  event_file_type                   =   , # TEXT                # (Not in dataset)
case_number                       =   hevid, # TEXT
date_of_admission                 =   dtmedical, # DATE
detected_by                       =   referredby, # TEXT
patient_facility_type             =   hospitalised, # TEXT
#  msf_involvement                   =   , # TEXT                # (Not in dataset)
age_years                         =   age, # INTEGER_POSITIVE
#  age_months                        =   , # INTEGER_POSITIVE   # (Dataset only has years)
#  age_days                          =   , # INTEGER_POSITIVE   # (Dataset only has years)
sex                               =   sex, # TEXT
patient_origin                    =   quartier, # ORG UNIT
#  residential_status_brief          =   , # TEXT               # (Not in dataset)
#  arrival_date_in_area_if_3m        =   , # DATE               # (Not in dataset)
#  ever_received_hepatitis_e_vaccine =   , # TEXT               # (Not in dataset)
#  date_of_last_vaccination          =   , # DATE               # (Not in dataset)
date_of_onset                     =   dtjaundice, # DATE
#  history_of_fever                  =   , # BOOLEAN            # (Not in dataset)
fever                             =   medfever, # BOOLEAN
nausea_anorexia                   =   mednausea, # BOOLEAN
vomiting                          =   medvomit, # BOOLEAN
epigastric_pain_heartburn         =   medepigastric, # BOOLEAN
generalized_itch                  =   meditching, # BOOLEAN
headache                          =   medheadache, # BOOLEAN
joint_pains                       =   medarthralgia, # BOOLEAN
diarrhoea                         =   meddiar, # BOOLEAN
bleeding                          =   medbleeding, # BOOLEAN
#  convulsions                       =   , # BOOLEAN            # (Not in dataset)
mental_state                      =   medmental, # BOOLEAN    # !(Needs value cleaning)
other_symptoms                    =   medother, # BOOLEAN
other_cases_in_hh                 =   medothhhajs, # BOOLEAN
#  traditional_medicines             =   , # BOOLEAN            # (Not in dataset)
#  traditional_medicine_details      =   , # TEXT               # (Not in dataset)
#  recent_travel                     =   , # BOOLEAN            # (Not in dataset)
#  water_source                      =   , # TEXT               # !(Split across many variables)
malaria_rdt_at_admission          =   medmalrdt, # TEXT
hep_b_rdt                         =   medhepb, # TEXT
hep_c_rdt                         =   medhepc, # TEXT
hep_e_rdt                         =   medhevrdt, # TEXT
#  dengue_rdt                        =   , # TEXT               # (Not in dataset)
date_lab_sample_taken             =   medblooddt, # DATE
test_hepatitis_a                  =   medhavelisa, # TEXT
test_hepatitis_b                  =   medhbvelisa, # TEXT
test_hepatitis_c                  =   medhcvelisa, # TEXT
test_hepatitis_e_virus            =   medhevelisa, # TEXT
test_hepatitis_e_igm              =   hevrecent, # TEXT
#  test_hepatitis_e_igg              =   , # TEXT               # (In same variable as elisa result)
test_hepatitis_e_genotype         =   hevgenotype, # TEXT
#  malaria_blood_film                =   , # TEXT               # (Not in dataset)
dengue                            =   dengue, # TEXT
yellow_fever                      =   yf, # TEXT
#  lassa_fever                       =   , # TEXT               # (Not in dataset)
#  typhoid                           =   , # TEXT               # (Not in dataset)
chikungunya_onyongnyong           =   chik, # TEXT
#  ebola_marburg                     =   , # TEXT               # (Not in dataset)
other_arthropod_transmitted_virus =   arbovpcr, # TEXT
#  other_pathogen                    =   , # TEXT               # (Not in dataset)
#  lab_comments                      =   , # TEXT               # (Not in dataset)
pregnant                          =   medpreg, # TEXT
trimester                         =   medpregtri, # TEXT
#  foetus_alive_at_admission         =   , # TEXT               # (Not in dataset)
#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
#  time_to_death                     =   , # TEXT               # (Not in dataset)
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =   block # TEXT
)
population_data_region <- rio::import("AJS_AmTiman_population_revised_for_template.xlsx", which="quartier")
# Use this if your dataset does not align with the data dictionary
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(matches("date|Date")), linelist::guess_dates,
error_tolerance = 0.5)
# Individually convert other date columns
class(linelist_cleaned$dthospitalisation)
linelist_cleaned$dthospitalisation <- linelist::guess_dates(linelist_cleaned$dthospitalisation)
class(linelist_cleaned$dthospitalisation)
# Repeat for variable "dtdeath"
linelist_cleaned$dtdeath <- linelist::guess_dates(linelist_cleaned$dtdeath)
table(linelist_cleaned$exit_status, useNA = "always")
# Tabulate to see all possible values of exit_status
table(linelist_cleaned$exit_status, useNA = "always")
linelist_cleaned <- linelist_cleaned %>%
mutate(exit_status2 = case_when(
exit_status == "Décédé"          ~ "Died",
exit_status == "-"               ~ NA_character_,
exit_status == "Echappé"         ~ "Left",
exit_status == "Déchargé/Guéri"  ~ "Discharged"
))
# Table the NEW variable to check transformation
table(linelist_cleaned$exit_status2, useNA = "always")
table(linelist_cleaned$exit_status, useNA = "always")
linelist_cleaned <- linelist_cleaned %>%
mutate(exit_status2 = case_when(
exit_status == "Décédé"          ~ "Died",
exit_status == "-"               ~ NA_character_,
exit_status == "Echappé"         ~ "Left",
exit_status == "Déchargé/Guéri"  ~ "Discharged"
))
table(linelist_cleaned$exit_status2, useNA = "always")
filter(linelist_cleaned, DIED, patient_facility_type == "Inpatient") %>%
descriptive(counter = "time_to_death", coltotals = TRUE) %>%
rename("Time (hours)" = time_to_death,
"Deaths (n)" = n,
"%" = prop) %>%
kable(digits = 2)
# use arguments from above to produce overal CFR
overall_cfr <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
case_fatality_rate_df(deaths = DIED, mergeCI = TRUE) %>%
rename("Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci)
knitr::kable(overall_cfr, digits = 2)         # print nicely with 2 digits
## use this version for coded values (e.g. "DOA", "DD")
linelist_cleaned$DIED <- linelist_cleaned$exit_status %in% c("Décédé")
# Tabulate to see all possible values of exit_status
table(linelist_cleaned$exit_status, useNA = "always")
linelist_cleaned <- linelist_cleaned %>%
mutate(exit_status2 = case_when(
exit_status == "Décédé"          ~ "Died",
exit_status == "-"               ~ NA_character_,
exit_status == "Echappé"         ~ "Left",
exit_status == "Déchargé/Guéri"  ~ "Discharged"
))
# Table the NEW variable to check transformation
table(linelist_cleaned$exit_status2, useNA = "always")
## Note we are looking within the NEW exit_status2 variable that is in English
linelist_cleaned$DIED <- linelist_cleaned$exit_status2 == "Died"
# use arguments from above to produce overal CFR
overall_cfr <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
case_fatality_rate_df(deaths = DIED, mergeCI = TRUE) %>%
rename("Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci)
knitr::kable(overall_cfr, digits = 2)         # print nicely with 2 digits
overall_cfr <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient")
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
reporting_week <- "2017-W52"  # Set the reporting week
# This code chunk runs in the background and actually imports the dataset while transforming "." to NA.
# The import code chunk above (with eval=FALSE) does not run, but shows the viewer the default import code.
linelist_raw <- rio::import("AJS_AmTiman.xlsx", which = "linelist", na=".")
## make a copy of your orginal dataset and name it linelist_cleaned
linelist_cleaned <- linelist_raw
# this function is preset rules for variable naming
# for example it changes spaces and dots to "_" and characters to lowercase
cleaned_colnames <- epitrix::clean_labels(colnames(linelist_raw))
# overwrite variable names with defined clean names
colnames(linelist_cleaned) <- cleaned_colnames
## Add the appropriate column names after the equals signs
linelist_cleaned <- rename(linelist_cleaned,
#  event_file_type                   =   , # TEXT                # (Not in dataset)
case_number                       =   hevid, # TEXT
date_of_admission                 =   dtmedical, # DATE
detected_by                       =   referredby, # TEXT
patient_facility_type             =   hospitalised, # TEXT
#  msf_involvement                   =   , # TEXT                # (Not in dataset)
age_years                         =   age, # INTEGER_POSITIVE
#  age_months                        =   , # INTEGER_POSITIVE   # (Dataset only has years)
#  age_days                          =   , # INTEGER_POSITIVE   # (Dataset only has years)
sex                               =   sex, # TEXT
patient_origin                    =   quartier, # ORG UNIT
#  residential_status_brief          =   , # TEXT               # (Not in dataset)
#  arrival_date_in_area_if_3m        =   , # DATE               # (Not in dataset)
#  ever_received_hepatitis_e_vaccine =   , # TEXT               # (Not in dataset)
#  date_of_last_vaccination          =   , # DATE               # (Not in dataset)
date_of_onset                     =   dtjaundice, # DATE
#  history_of_fever                  =   , # BOOLEAN            # (Not in dataset)
fever                             =   medfever, # BOOLEAN
nausea_anorexia                   =   mednausea, # BOOLEAN
vomiting                          =   medvomit, # BOOLEAN
epigastric_pain_heartburn         =   medepigastric, # BOOLEAN
generalized_itch                  =   meditching, # BOOLEAN
headache                          =   medheadache, # BOOLEAN
joint_pains                       =   medarthralgia, # BOOLEAN
diarrhoea                         =   meddiar, # BOOLEAN
bleeding                          =   medbleeding, # BOOLEAN
#  convulsions                       =   , # BOOLEAN            # (Not in dataset)
mental_state                      =   medmental, # BOOLEAN    # !(Needs value cleaning)
other_symptoms                    =   medother, # BOOLEAN
other_cases_in_hh                 =   medothhhajs, # BOOLEAN
#  traditional_medicines             =   , # BOOLEAN            # (Not in dataset)
#  traditional_medicine_details      =   , # TEXT               # (Not in dataset)
#  recent_travel                     =   , # BOOLEAN            # (Not in dataset)
#  water_source                      =   , # TEXT               # !(Split across many variables)
malaria_rdt_at_admission          =   medmalrdt, # TEXT
hep_b_rdt                         =   medhepb, # TEXT
hep_c_rdt                         =   medhepc, # TEXT
hep_e_rdt                         =   medhevrdt, # TEXT
#  dengue_rdt                        =   , # TEXT               # (Not in dataset)
date_lab_sample_taken             =   medblooddt, # DATE
test_hepatitis_a                  =   medhavelisa, # TEXT
test_hepatitis_b                  =   medhbvelisa, # TEXT
test_hepatitis_c                  =   medhcvelisa, # TEXT
test_hepatitis_e_virus            =   medhevelisa, # TEXT
test_hepatitis_e_igm              =   hevrecent, # TEXT
#  test_hepatitis_e_igg              =   , # TEXT               # (In same variable as elisa result)
test_hepatitis_e_genotype         =   hevgenotype, # TEXT
#  malaria_blood_film                =   , # TEXT               # (Not in dataset)
dengue                            =   dengue, # TEXT
yellow_fever                      =   yf, # TEXT
#  lassa_fever                       =   , # TEXT               # (Not in dataset)
#  typhoid                           =   , # TEXT               # (Not in dataset)
chikungunya_onyongnyong           =   chik, # TEXT
#  ebola_marburg                     =   , # TEXT               # (Not in dataset)
other_arthropod_transmitted_virus =   arbovpcr, # TEXT
#  other_pathogen                    =   , # TEXT               # (Not in dataset)
#  lab_comments                      =   , # TEXT               # (Not in dataset)
pregnant                          =   medpreg, # TEXT
trimester                         =   medpregtri, # TEXT
#  foetus_alive_at_admission         =   , # TEXT               # (Not in dataset)
#  delivery_event                    =   , # TRUE_ONLY          # (Not in dataset)
pregnancy_outcome_at_exit         =   medppoutcome, # TEXT
exit_status                       =   outcomehp, # TEXT
#  date_of_exit                      =   , # DATE               # (Not in dataset)
#  time_to_death                     =   , # TEXT               # (Not in dataset)
treatment_facility_site           =   hpid, # TEXT
#  treatment_location                =   , # ORGANISATION_UNIT  # (Not in dataset)
patient_origin_free_text          =   block # TEXT
)
population_data_region <- rio::import("AJS_AmTiman_population_revised_for_template.xlsx", which="quartier")
# Use this if your dataset does not align with the data dictionary
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(matches("date|Date")), linelist::guess_dates,
error_tolerance = 0.5)
# Individually convert other date columns
class(linelist_cleaned$dthospitalisation)
linelist_cleaned$dthospitalisation <- linelist::guess_dates(linelist_cleaned$dthospitalisation)
class(linelist_cleaned$dthospitalisation)
# Repeat for variable "dtdeath"
linelist_cleaned$dtdeath <- linelist::guess_dates(linelist_cleaned$dtdeath)
# Check the values in patient_facility_type
table(linelist_cleaned$patient_facility_type, useNA = "always")
# Convert the values
linelist_cleaned <- linelist_cleaned %>%
mutate(patient_facility_type = case_when(
patient_facility_type == "Oui" ~ "Inpatient",
patient_facility_type == "Non" ~ "Outpatient"
))
# Re-check the values in patient_facility_type
table(linelist_cleaned$patient_facility_type, useNA = "always")
# create an epiweek variable
# floor_day shortens to only give you the week number (rather than including day as well)
# factor includes all weeks between the min and max as levels (useful for zero count weeks)
linelist_cleaned$epiweek <- aweek::date2week(linelist_cleaned$date_of_onset,
floor_day = TRUE,
factor = TRUE)
## create an age group variable by specifying categorical breaks
linelist_cleaned$age_group <- age_categories(linelist_cleaned$age_years,
breakers = c(0, 3, 15, 30, 45))
# Tabulate to see all possible values of exit_status
table(linelist_cleaned$exit_status, useNA = "always")
linelist_cleaned <- linelist_cleaned %>%
mutate(exit_status2 = case_when(
exit_status == "Décédé"          ~ "Died",
exit_status == "-"               ~ NA_character_,
exit_status == "Echappé"         ~ "Left",
exit_status == "Déchargé/Guéri"  ~ "Discharged"
))
# Table the NEW variable to check transformation
table(linelist_cleaned$exit_status2, useNA = "always")
## Note we are looking within the NEW exit_status2 variable that is in English
linelist_cleaned$DIED <- linelist_cleaned$exit_status2 == "Died"
# Create a factor variable based on rules from other simple character variables
# If you have access to lab results, you can create a case definition variable
# the tilda (~) is used to assign the new values (Conf, prob, susp, unknown)
# starting from the specific to the general
# TRUE assigns all remaining rows
# You MUST modify this section to match your case definition. The below
# uses positive RDT for Confirmed and epi link only for Probable.
#
linelist_cleaned <- linelist_cleaned %>%
mutate(case_def = case_when(
is.na(hep_e_rdt) & is.na(other_cases_in_hh)           ~ NA_character_,
hep_e_rdt == "Positive"                               ~ "Confirmed",
hep_e_rdt != "Positive" & other_cases_in_hh == "Yes"  ~ "Probable",
TRUE                                                  ~ "Suspected"
))
# vectors of variable names ----------------------------------------------------
## You may want to group the names of several variables that have the same possible
## values in to a named vector.
## This way if you want to run the same function over these variables you can
## simply use the named vector rather than typing out each variable individually
# create a grouping of all symptoms
SYMPTOMS <- c("generalized_itch",
#"history_of_fever",
"fever",
"joint_pains",
"epigastric_pain_heartburn",
"nausea_anorexia",
"vomiting",
"diarrhoea",
"bleeding",
"headache",
"mental_state",
#"convulsions",
"other_symptoms"
)
# create a grouping of all lab tests
LABS <- c("hep_b_rdt",
"hep_c_rdt",
"hep_e_rdt",
"test_hepatitis_a",
"test_hepatitis_b",
"test_hepatitis_c",
#          "test_hepatitis_e_igg",
"test_hepatitis_e_igm" ,
"test_hepatitis_e_genotype",
"test_hepatitis_e_virus",
"malaria_rdt_at_admission",
#          "malaria_blood_film",
"dengue",
#          "dengue_rdt",
"yellow_fever",
#          "typhoid",
"chikungunya_onyongnyong",
#          "ebola_marburg",
#          "lassa_fever",
"other_arthropod_transmitted_virus"
#          "other_pathogen"
)
# Check date range of date_of_onset
range(linelist_cleaned$date_of_onset, na.rm = T)
# Filter to keep observations where date_of_onset after April 2016 AND before October 2017 (OR missing)
linelist_cleaned <- linelist_cleaned %>%
filter((date_of_onset >= as.Date("2016-04-01") & date_of_onset <= as.Date("2017-10-01")) | is.na(date_of_onset))
# Re-check the date range
range(linelist_cleaned$date_of_onset, na.rm = T)
# drop cases after current week
# you will probably have cases in your dataset if case finding continues
# as these are after the week of reporting, drop them
linelist_cleaned <- linelist_cleaned %>%
filter(date_of_onset <= week2date(sprintf("%s-7", reporting_week)))
# define the first week of outbreak (date of first case)
first_week <- levels(linelist_cleaned$epiweek)[1]
# outbreak start
# return the first day in the week of first case
obs_start <- week2date(sprintf("%s-1", first_week))
# return last day of reporting week
obs_end   <- week2date(sprintf("%s-7", reporting_week))
# use if you have lab results in your data
# get counts and props of age groups by case definition
# include column and row totals
descriptive(linelist_cleaned, "age_group", "case_def", coltotals = TRUE, rowtotals = TRUE) %>%
rename("Age group" = age_group) %>%
rename_redundant(prop = "%") %>%
augment_redundant("_n$" = " cases (n)") %>%
kable(digits = 2)
descriptive(linelist_cleaned, "age_group", "sex", coltotals = TRUE, rowtotals = TRUE) %>%
rename("Age group" = age_group) %>%
rename_redundant(prop = "%") %>%
augment_redundant("_n$" = " cases (n)") %>%
kable(digits = 2)
descriptive(linelist_cleaned, "age_group", "sex",
coltotals = TRUE, rowtotals = TRUE, proptotal = TRUE) %>%
rename("Age group" = age_group) %>%
rename_redundant(prop = "%") %>%
augment_redundant("_n$" = " cases (n)") %>%
kable(digits = 2)
# plot age pyramid
plot_age_pyramid(linelist_cleaned,
age_group = "age_group",
split_by = "sex") +
labs(y = "Cases (n)", x = "Age group") + # change axis  labels (nb. x/y flip)
theme(legend.position = "bottom",     # move legend to bottom
legend.title = element_blank(), # remove title
text = element_text(size = 18)  # change text size
)
# get counts and proportions for all variables named in SYMPTOMS
multi_descriptive(linelist_cleaned, SYMPTOMS) %>%
# re-order columns (drop total_prop too)
select(symptom, Yes_n, Yes_prop, No_n, No_prop, Total_n) %>%
# rename accordingly
rename_redundant("prop" = "%") %>%
augment_redundant("_n$" = " (n)") %>%
kable(digits = 2)
# get counts and proportions for all variables named in LABS
multi_descriptive(linelist_cleaned, LABS, .id = "Lab test") %>%
# re-order columns (drop total_prop too)
select("Lab test", Pos_n, Positive_prop, Neg_n, Negative_prop,
"Not done_n", "Not done_prop", Total_n) %>%
# rename accordingly
rename("Unknown (n)" = "Not done_n") %>%
rename_redundant("prop" = "%") %>%
augment_redundant("_n$" = " (n)") %>%
kable(digits = 2)
# use arguments from above to produce overal CFR
overall_cfr <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
case_fatality_rate_df(deaths = DIED, mergeCI = TRUE) %>%
rename("Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci)
knitr::kable(overall_cfr, digits = 2)         # print nicely with 2 digits
