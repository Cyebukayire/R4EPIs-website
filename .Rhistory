# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset = case_when(
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA),
TRUE                                   ~ date_of_onset
))
# Create variable epiweek
linelist_cleaned$epiweek <- aweek::date2week(linelist_cleaned$date_of_onset,
floor_day = TRUE,
factor = TRUE)
# See the range of age_years values, removing (excluding) NA
range(linelist_cleaned$age_years, na.rm = TRUE)
# Convert variable age_years to numeric class
linelist_cleaned$age_years <- as.numeric(linelist_cleaned$age_years)
# For patients under 5 years, the new variable age_months is based on age_years * 12
linelist_cleaned <- mutate(linelist_cleaned,
age_months = case_when(
age_years < 5 ~ age_years * 12
))
## create age group variable for under 5 years based on months
linelist_cleaned$age_group_mon <- age_categories(linelist_cleaned$age_months,
breakers = c(0, 6, 9, 12, 24),
ceiling = TRUE)
## create an age group variable by specifying categorical breaks
linelist_cleaned$age_group <- age_categories(linelist_cleaned$age_years,
breakers = c(0, 3, 15, 30, 45))
# Tabulate to see all possible values of exit_status
table(linelist_cleaned$exit_status, useNA = "always")
# Create exit_status2 from values in exit_status
linelist_cleaned <- linelist_cleaned %>%
mutate(exit_status2 = case_when(
exit_status == "Décédé"          ~ "Died",
exit_status == "-"               ~ NA_character_,
exit_status == "Echappé"         ~ "Left",
exit_status == "Déchargé/Guéri"  ~ "Discharged"
))
# Tabulate the NEW exit_status2 variable to check correct assignment
table(linelist_cleaned$exit_status2, useNA = "always")
## Note we are directing R to look within the NEW exit_status2 variable
linelist_cleaned$DIED <- linelist_cleaned$exit_status2 == "Died"
# View all the values in patient_facility_type
table(linelist_cleaned$patient_facility_type, useNA = "always")
# Convert the values
linelist_cleaned <- linelist_cleaned %>%
mutate(patient_facility_type = case_when(
patient_facility_type == "Oui" ~ "Inpatient",
patient_facility_type == "Non" ~ "Outpatient"
))
# Re-check that the values converted sucessfully
table(linelist_cleaned$patient_facility_type, useNA = "always")
table(linelist_cleaned$hep_e_rdt)
## sometimes, coding is inconsistent across variables -- for example, "Yes" / "No"
## may be coded as Y, y, yes, 1 / N, n, no, 0. You can change them all at once!
## Create a list of the variables you want to change, and run the following.
## You may need to edit this code if options are different in your data.
# # create list of variables
# change_test_vars <- c("headache", "fever", "vomiting")
#
# # standardize options
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(hep_e_rdt), forcats::fct_recode,
Positive = "Pos",
Negative = "Neg"
)
for (var in LABS) {}
LABS
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"stringr",     # clean text
"rio",         # read in data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"epitrix",     # epi helpers and tricks
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
date2week("2017-04-20")      #Sys.Date() uses the current date from your computer
reporting_week <- "2017-W16"  # Set the reporting week
# Read in the R object linelist_cleaned that is defined and saved
# in the AJS_Walkthrough_Cleaning script
linelist_cleaned <- readRDS("data/linelist_aligned.rds")
# Use this is your dataset aligns with the data dictionary
# Creates list of date variables from the data dictionary
#DATEVARS <- filter(linelist_dict, data_element_valuetype == "DATE") %>%
#  select(data_element_shortname) # select date vars
# change to the date variables found in your dataset to class date
#linelist_cleaned <- linelist_cleaned %>%
#  mutate_at(DATEVARS$data_element_shortname, as.Date)
# Use this if your dataset does not align with the data dictionary
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(matches("date|Date")), linelist::guess_dates,
error_tolerance = 0.5)
# Individually convert other date columns
class(linelist_cleaned$dtdeath)
linelist_cleaned$dtdeath <- linelist::guess_dates(linelist_cleaned$dtdeath)
class(linelist_cleaned$dtdeath)
# Repeat for variable "dtdeath"
linelist_cleaned$dthospitalisation <- linelist::guess_dates(linelist_cleaned$dthospitalisation)
# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset = case_when(
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA),
TRUE                                   ~ date_of_onset
))
# Create variable epiweek
linelist_cleaned$epiweek <- aweek::date2week(linelist_cleaned$date_of_onset,
floor_day = TRUE,
factor = TRUE)
# See the range of age_years values, removing (excluding) NA
range(linelist_cleaned$age_years, na.rm = TRUE)
# Convert variable age_years to numeric class
linelist_cleaned$age_years <- as.numeric(linelist_cleaned$age_years)
# For patients under 5 years, the new variable age_months is based on age_years * 12
linelist_cleaned <- mutate(linelist_cleaned,
age_months = case_when(
age_years < 5 ~ age_years * 12
))
## create age group variable for under 5 years based on months
linelist_cleaned$age_group_mon <- age_categories(linelist_cleaned$age_months,
breakers = c(0, 6, 9, 12, 24),
ceiling = TRUE)
## create an age group variable by specifying categorical breaks
linelist_cleaned$age_group <- age_categories(linelist_cleaned$age_years,
breakers = c(0, 3, 15, 30, 45))
# Tabulate to see all possible values of exit_status
table(linelist_cleaned$exit_status, useNA = "always")
# Create exit_status2 from values in exit_status
linelist_cleaned <- linelist_cleaned %>%
mutate(exit_status2 = case_when(
exit_status == "Décédé"          ~ "Died",
exit_status == "-"               ~ NA_character_,
exit_status == "Echappé"         ~ "Left",
exit_status == "Déchargé/Guéri"  ~ "Discharged"
))
# Tabulate the NEW exit_status2 variable to check correct assignment
table(linelist_cleaned$exit_status2, useNA = "always")
## Note we are directing R to look within the NEW exit_status2 variable
linelist_cleaned$DIED <- linelist_cleaned$exit_status2 == "Died"
# View all the values in patient_facility_type
table(linelist_cleaned$patient_facility_type, useNA = "always")
# Convert the values
linelist_cleaned <- linelist_cleaned %>%
mutate(patient_facility_type = case_when(
patient_facility_type == "Oui" ~ "Inpatient",
patient_facility_type == "Non" ~ "Outpatient"
))
# Re-check that the values converted sucessfully
table(linelist_cleaned$patient_facility_type, useNA = "always")
## sometimes, coding is inconsistent across variables -- for example, "Yes" / "No"
## may be coded as Y, y, yes, 1 / N, n, no, 0. You can change them all at once!
## Create a list of the variables you want to change, and run the following.
## You may need to edit this code if options are different in your data.
# # create list of variables
change_test_vars <- c("hep_e_rdt", "hep_c_rdt", "hep_b_rdt", "test_hepatitis_b", "test_hepatitis_c", "test_hepatitis_e", "malaria_rdt_at_admission", "test_hepatitis_e_igm", "hevpcr", "other_arthropod_transmitted_virus")
# standardize options
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(change_test_vars), forcats::fct_recode,
Positive = "Pos",
Positive = 1,
Positive = "yes",
Positive = "Yes",
Negative = "Neg",
Negative = 0,
Negative = "no",
Negative = "No"
)
## sometimes, coding is inconsistent across variables -- for example, "Yes" / "No"
## may be coded as Y, y, yes, 1 / N, n, no, 0. You can change them all at once!
## Create a list of the variables you want to change, and run the following.
## You may need to edit this code if options are different in your data.
# # create list of variables
change_test_vars <- c("hep_e_rdt", "hep_c_rdt", "hep_b_rdt", "test_hepatitis_a", "test_hepatitis_b", "test_hepatitis_c", "malaria_rdt_at_admission", "test_hepatitis_e_igm", "test_hepatitis_e_virus", "hevpcr", "other_arthropod_transmitted_virus")
# standardize options
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(change_test_vars), forcats::fct_recode,
Positive = "Pos",
Positive = 1,
Positive = "yes",
Positive = "Yes",
Negative = "Neg",
Negative = 0,
Negative = "no",
Negative = "No"
)
## sometimes, coding is inconsistent across variables -- for example, "Yes" / "No"
## may be coded as Y, y, yes, 1 / N, n, no, 0. You can change them all at once!
## Create a list of the variables you want to change, and run the following.
## You may need to edit this code if options are different in your data.
# # create list of variables
change_test_vars <- c("hep_e_rdt", "hep_c_rdt", "hep_b_rdt", "test_hepatitis_a", "test_hepatitis_b", "test_hepatitis_c", "malaria_rdt_at_admission", "test_hepatitis_e_igm", "test_hepatitis_e_virus", "hevpcr", "other_arthropod_transmitted_virus")
# standardize options
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(change_test_vars), forcats::fct_recode,
Positive = "Pos",
Positive = "yes",
Positive = "Yes",
Negative = "Neg",
Negative = "no",
Negative = "No"
)
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"stringr",     # clean text
"rio",         # read in data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"epitrix",     # epi helpers and tricks
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
date2week("2017-04-20")      #Sys.Date() uses the current date from your computer
reporting_week <- "2017-W16"  # Set the reporting week
# Read in the R object linelist_cleaned that is defined and saved
# in the AJS_Walkthrough_Cleaning script
linelist_cleaned <- readRDS("data/linelist_aligned.rds")
# Use this is your dataset aligns with the data dictionary
# Creates list of date variables from the data dictionary
#DATEVARS <- filter(linelist_dict, data_element_valuetype == "DATE") %>%
#  select(data_element_shortname) # select date vars
# change to the date variables found in your dataset to class date
#linelist_cleaned <- linelist_cleaned %>%
#  mutate_at(DATEVARS$data_element_shortname, as.Date)
# Use this if your dataset does not align with the data dictionary
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(matches("date|Date")), linelist::guess_dates,
error_tolerance = 0.5)
# Individually convert other date columns
class(linelist_cleaned$dtdeath)
linelist_cleaned$dtdeath <- linelist::guess_dates(linelist_cleaned$dtdeath)
class(linelist_cleaned$dtdeath)
# Repeat for variable "dtdeath"
linelist_cleaned$dthospitalisation <- linelist::guess_dates(linelist_cleaned$dthospitalisation)
# Check range of date_of_onset values, ignoring (removing) missing values
range(linelist_cleaned$date_of_onset, na.rm = TRUE)
# Convert dates before April 2016 or after October 2017 to missing (NA)
linelist_cleaned <- mutate(linelist_cleaned,
date_of_onset = case_when(
date_of_onset < as.Date("2016-04-01")  ~ as.Date(NA),
date_of_onset > as.Date("2017-10-31")  ~ as.Date(NA),
TRUE                                   ~ date_of_onset
))
# Create variable epiweek
linelist_cleaned$epiweek <- aweek::date2week(linelist_cleaned$date_of_onset,
floor_day = TRUE,
factor = TRUE)
# See the range of age_years values, removing (excluding) NA
range(linelist_cleaned$age_years, na.rm = TRUE)
# Convert variable age_years to numeric class
linelist_cleaned$age_years <- as.numeric(linelist_cleaned$age_years)
# For patients under 5 years, the new variable age_months is based on age_years * 12
linelist_cleaned <- mutate(linelist_cleaned,
age_months = case_when(
age_years < 5 ~ age_years * 12
))
## create age group variable for under 5 years based on months
linelist_cleaned$age_group_mon <- age_categories(linelist_cleaned$age_months,
breakers = c(0, 6, 9, 12, 24),
ceiling = TRUE)
## create an age group variable by specifying categorical breaks
linelist_cleaned$age_group <- age_categories(linelist_cleaned$age_years,
breakers = c(0, 3, 15, 30, 45))
# Tabulate to see all possible values of exit_status
table(linelist_cleaned$exit_status, useNA = "always")
# Create exit_status2 from values in exit_status
linelist_cleaned <- linelist_cleaned %>%
mutate(exit_status2 = case_when(
exit_status == "Décédé"          ~ "Died",
exit_status == "-"               ~ NA_character_,
exit_status == "Echappé"         ~ "Left",
exit_status == "Déchargé/Guéri"  ~ "Discharged"
))
# Tabulate the NEW exit_status2 variable to check correct assignment
table(linelist_cleaned$exit_status2, useNA = "always")
## Note we are directing R to look within the NEW exit_status2 variable
linelist_cleaned$DIED <- linelist_cleaned$exit_status2 == "Died"
# View all the values in patient_facility_type
table(linelist_cleaned$patient_facility_type, useNA = "always")
# Convert the values
linelist_cleaned <- linelist_cleaned %>%
mutate(patient_facility_type = case_when(
patient_facility_type == "Oui" ~ "Inpatient",
patient_facility_type == "Non" ~ "Outpatient"
))
# Re-check that the values converted sucessfully
table(linelist_cleaned$patient_facility_type, useNA = "always")
## sometimes, coding is inconsistent across variables -- for example, "Yes" / "No"
## may be coded as Y, y, yes, 1 / N, n, no, 0. You can change them all at once!
## Create a list of the variables you want to change, and run the following.
## You may need to edit this code if options are different in your data.
# # create list of variables
change_test_vars <- c("hep_e_rdt", "hep_c_rdt", "hep_b_rdt", "test_hepatitis_a", "test_hepatitis_b", "test_hepatitis_c", "malaria_rdt_at_admission", "test_hepatitis_e_igm", "test_hepatitis_e_virus", "hevpcr", "other_arthropod_transmitted_virus")
# standardize options
linelist_cleaned <- linelist_cleaned %>%
mutate_at(vars(change_test_vars), forcats::fct_recode,
Positive = "Pos",
Positive = "yes",
Positive = "Yes",
Negative = "Neg",
Negative = "no",
Negative = "No"
)
View(linelist_cleaned)
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"stringr",     # clean text
"rio",         # read in data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"epitrix",     # epi helpers and tricks
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
date2week("2017-04-20")      #Sys.Date() uses the current date from your computer
reporting_week <- readRDS("data/reporting_week.rds") # Set the reporting week
# Read in the R object linelist_cleaned that is defined and saved
# in the AJS_Walkthrough_Cleaning script
linelist_cleaned <- readRDS("data/linelist_cleaned.rds")
population_data_region <- readRDS("data/population_data.rds")
SYMPTOMS <- readRDS("data/SYMPTOMS.rds")
LABS <- readRDS("data/LABS.rds")
first_week <- readRDS("data/first_week.rds")
obs_start <- readRDS("data/obs_start.rds")
obs_end <- readRDS("data/obs_end.rds")
# Describe observations by age_group and case_def
tab_linelist(linelist_cleaned,
age_group, strata = case_def,
col_total = TRUE, row_total = TRUE) %>%
select(-variable) %>%
rename("Age group" = value) %>%
rename_redundant("%" = proportion) %>%
augment_redundant(" cases (n)" = " n$") %>%
kable(digits = 2)
tab_linelist(linelist_cleaned,
age_group, strata = sex,
col_total = TRUE, row_total = TRUE, prop_total = TRUE) %>%
select(-variable) %>%
rename("Age group" = value) %>%
#  rename_redundant("%" = proportion) %>%
augment_redundant(" cases (n)" = " n$") %>%
kable(digits = 2)
# plot age pyramid by sex
plot_age_pyramid(linelist_cleaned,
age_group = "age_group",
split_by = "sex") +
labs(y = "Cases (n)", x = "Age group") + # change axis  labels (nb. x/y flip)
theme(legend.position = "bottom",     # move legend to bottom
legend.title = element_blank(), # remove title
text = element_text(size = 18)  # change text size
)
# plot age pyramid by month groups, for observations under 2 years
filter(linelist_cleaned, age_years <= 2) %>%
plot_age_pyramid(age_group = "age_group_mon",
split_by = "sex") +
# stack_by = "case_def") +
labs(y = "Cases (n)", x = "Age group (months)") + # change axis  labels (nb. x/y flip)
theme(legend.position = "bottom",     # move legend to bottom
legend.title = element_blank(), # remove title
text = element_text(size = 18)  # change text size
)
# get counts and proportions for all variables named in SYMPTOMS
tab_linelist(linelist_cleaned, SYMPTOMS, keep = "Oui") %>%
select(-value) %>%
# fix the way symptom names are displayed
mutate(variable = str_to_sentence(gsub("_", " ", variable))) %>%
# rename accordingly
rename_redundant("%" = proportion) %>%
augment_redundant(" (n)" = " n$") %>%
kable(digits = 2)
# get counts and proportions for all variables named in LABS
tab_linelist(linelist_cleaned, LABS,
transpose = "value") %>%
# fix the way lab test names are displayed
mutate(variable = str_to_sentence(gsub("_", " ", variable))) %>%
# rename accordingly
rename("Lab test" = variable) %>%
rename_redundant("%" = proportion) %>%
augment_redundant(" (n)" = " n$") %>%
kable(digits = 2)
# use arguments from above to produce overal CFR
overall_cfr <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
case_fatality_rate_df(deaths = DIED, mergeCI = TRUE) %>%
rename("Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci)
knitr::kable(overall_cfr, digits = 2)         # print nicely with 2 digits
linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
mutate(sex = forcats::fct_explicit_na(sex, "-")) %>%
case_fatality_rate_df(deaths = DIED, group = sex, mergeCI = TRUE, add_total = TRUE) %>%
rename("Sex" = sex,
"Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci) %>%
knitr::kable(digits = 2)
linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
case_fatality_rate_df(deaths = DIED, group = age_group, mergeCI = TRUE, add_total = TRUE) %>%
tidyr::complete(age_group,
fill = list(deaths = 0,
population = 0,
cfr = 0,
ci = 0)) %>% # Ensure all levels are represented
rename("Age group" = age_group,
"Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci) %>%
knitr::kable(digits = 2)
# Use if you have enough confirmed cases for comparative analysis
linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
case_fatality_rate_df(deaths = DIED, group = case_def, mergeCI = TRUE, add_total = TRUE) %>%
rename("Case definition" = case_def,
"Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci) %>%
knitr::kable(digits = 2)
table(linelist_cleaned$other_cases_in_hh)
