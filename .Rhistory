# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"stringr",     # clean text
"rio",         # read in data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"epitrix",     # epi helpers and tricks
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
date2week("2017-04-20")      #Sys.Date() uses the current date from your computer
reporting_week <- readRDS("data/reporting_week.rds") # Set the reporting week
# Read in the R objects that were defined in previous pages
linelist_cleaned <- readRDS("data/linelist_person_cleaned.rds")
population_data_region <- readRDS("data/population_data.rds")
SYMPTOMS <- readRDS("data/SYMPTOMS.rds")
LABS <- readRDS("data/LABS.rds")
first_week <- readRDS("data/first_week.rds")
obs_start <- readRDS("data/obs_start.rds")
obs_end <- readRDS("data/obs_end.rds")
# This code creates case counts for each week of your outbreak, overall
# As with aweek, you can change the start of your week to e.g. "Sunday week"
inc_week_7 <- incidence(linelist_cleaned$date_of_onset, interval = "Monday week")
# this sets the theme in ggplot for epicurves
epicurve_theme <- theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "grey60", linetype = 3),
panel.grid.major.y = element_line(color = "grey60", linetype = 3)
)
# This sets the labels in ggplot for the epicurves
epicurve_labels <- labs(x = "Calendar week",
y = "Cases (n)",
title = "Cases by week of onset",
subtitle = sprintf("Source: MSF data from %s", reporting_week)
)
# plot your epicurve as a ggplot (incidence::plot is different to base::plot)
basic_curve <- plot(inc_week_7, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_7)) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates and remove legend title
epicurve_theme
# show your plot (stored for later use)
basic_curve
## if the outbreak has been going on for a while, your x-axis might look messy.
# to reduce the number of labels, uncomment the below.
# you can customize the number of breaks by changing n_breaks.
#
# basic_curve + scale_x_incidence(inc_week_7, n_breaks = 6)
inc_week_7
# plot your epicurve as a ggplot (incidence::plot is different to base::plot)
basic_curve <- plot(inc_week_7, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_7)) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates and remove legend title
epicurve_theme
# show your plot (stored for later use)
basic_curve
## if the outbreak has been going on for a while, your x-axis might look messy.
# to reduce the number of labels, uncomment the below.
# you can customize the number of breaks by changing n_breaks.
#
basic_curve + scale_x_incidence(inc_week_7, n_breaks = 6)
# plot your epicurve as a ggplot (incidence::plot is different to base::plot)
basic_curve <- plot(inc_week_7, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_7)) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates and remove legend title
epicurve_theme
# show your plot (stored for later use)
basic_curve
## if the outbreak has been going on for a while, your x-axis might look messy.
# to reduce the number of labels, uncomment the below.
# you can customize the number of breaks by changing n_breaks.
#
basic_curve + scale_x_incidence(inc_week_7, n_breaks = 6)
# This code creates case counts for two week groups of your outbreak, overall
# As with aweek, you can change the start of your week to e.g. "2 sunday weeks"
inc_week_14 <- incidence(linelist_cleaned$date_of_onset, interval = "2 Monday weeks")
# plot your epicurve
plot(inc_week_14, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_14)) +
scale_y_continuous(expand = c(0,0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates and remove legend title
epicurve_theme
# get counts by gender
inc_week_7_gender <- incidence(linelist_cleaned$date_of_onset,
interval = "Monday week",
groups = linelist_cleaned$sex)
# plot your epicurve
# here we remove the boxes around each case as it makes gender colours hard to see! (show_cases = FALSE)
plot(inc_week_7_gender, show_cases = FALSE, border = "black", n_breaks = nrow(inc_week_7_gender)) +
scale_y_continuous(expand = c(0,0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates, remove legend title and move legend to bottom
epicurve_theme
# get counts by gender
inc_week_7_gender <- incidence(linelist_cleaned$date_of_onset,
interval = "2 Monday week",
groups = linelist_cleaned$sex)
# plot your epicurve
# here we remove the boxes around each case as it makes gender colours hard to see! (show_cases = FALSE)
plot(inc_week_7_gender, show_cases = FALSE, border = "black", n_breaks = nrow(inc_week_7_gender)) +
scale_y_continuous(expand = c(0,0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates, remove legend title and move legend to bottom
epicurve_theme
# get counts by gender
inc_week_7_gender <- incidence(date_of_onset,
interval = "2 Monday weeks",
groups = sex)
# plot your epicurve
# here we remove the boxes around each case as it makes gender colours hard to see! (show_cases = FALSE)
plot(inc_week_7_gender, show_cases = FALSE, border = "black", n_breaks = nrow(inc_week_7_gender)) +
scale_y_continuous(expand = c(0,0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates, remove legend title and move legend to bottom
epicurve_theme
# filter the dataset and pass it to the incidence() function
inc_week_7_sex_fac <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
with(incidence(date_of_onset, interval = "Monday week", groups = sex))
# plot as before
plot(inc_week_7_sex_fac, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_7_sex_fac)) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates, remove legend title and move legend to bottom
epicurve_theme
# filter the dataset and pass it to the incidence() function
inc_week_7_sex_fac <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
with(incidence(date_of_onset, interval = "2 Monday weeks", groups = sex))
# plot as before
plot(inc_week_7_sex_fac, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_7_sex_fac)) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates, remove legend title and move legend to bottom
epicurve_theme
# counts and cumulative counts by week
cases <- linelist_cleaned %>%
arrange(date_of_onset) %>%        # arrange by date of onset
count(epiweek, .drop = FALSE) %>% # count all epiweeks and include zero counts
mutate(cumulative = cumsum(n))    # add a cumulative sum
# attack rate for each week
ar <- attack_rate(cases$n, population, multiplier = 10000) %>%
bind_cols(select(cases, epiweek), .) # add the epiweek column to table
ar %>%
merge_ci_df(e = 4) %>% # merge the lower and upper CI into one column
rename("Epiweek" = epiweek,
"Cases (n)" = cases,
"Population" = population,
"AR (per 10,000)" = ar,
"95%CI" = ci) %>%
knitr::kable(digits = 2, align = "r")
cases <- linelist_cleaned %>%
arrange(date_of_onset) %>%        # arrange by date of onset
count(epiweek, .drop = FALSE) %>% # count all epiweeks and include zero counts
mutate(cumulative = cumsum(n))    # add a cumulative sum
# attack rate for each week
ar <- attack_rate(cases$n, population, multiplier = 10000)
ar
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"stringr",     # clean text
"rio",         # read in data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"epitrix",     # epi helpers and tricks
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
date2week("2017-04-20")      #Sys.Date() uses the current date from your computer
reporting_week <- readRDS("data/reporting_week.rds") # Set the reporting week
# Read in the R objects that were defined in previous pages
linelist_cleaned <- readRDS("data/linelist_person_cleaned.rds")
population_data_region <- readRDS("data/population_data.rds")
population <- readRDS("data/population.rds")
SYMPTOMS <- readRDS("data/SYMPTOMS.rds")
LABS <- readRDS("data/LABS.rds")
first_week <- readRDS("data/first_week.rds")
obs_start <- readRDS("data/obs_start.rds")
obs_end <- readRDS("data/obs_end.rds")
# cumulative attack rate by week
attack_rate(cases$cumulative, population, multiplier = 10000) %>%
bind_cols(select(cases, epiweek), .) %>% # add the epiweek column to table
merge_ci_df(e = 4) %>% # merge the lower and upper CI into one column
rename("Epiweek" = epiweek,
"Cases (n)" = cases,
"Population" = population,
"AR (per 10,000)" = ar,
"95%CI" = ci) %>%
knitr::kable(digits = 2, align = "r")
# group by known outcome and case definition
cfr <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
case_fatality_rate_df(grepl("Dead", exit_status), group = epiweek)
cfr %>%
merge_ci_df(e = 4) %>% # merge the lower and upper CI into one column
rename("Epiweek" = epiweek,
"Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci) %>%
knitr::kable(digits = 2, align = "r")
ar_plot <- ggplot(ar, aes(x = week2date(epiweek) + (7 * 0.5), group = 1)) +
geom_ribbon(aes(ymin = lower, ymax = upper),
color = "blue", fill = "blue", linetype = 2, alpha = 0.2, show.legend = FALSE) +
geom_line(aes(y = ar), color = "blue", show.legend = FALSE) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# scale the x axis the same as the incidence curve. Expand forces it to align.
incidence::scale_x_incidence(inc_week_7, n_breaks = nrow(inc_week_7), expand = c(0, 7 * 1.5)) +
# add labels to axes and below chart
labs(x = "Calendar week", y = "AR [95% CI]", subtitle = "Attack Rate (per 10,000)") +
# change visuals of dates and remove legend title
epicurve_theme
cfr_plot <- ggplot(cfr, aes(x = week2date(epiweek) + (7 * 0.5), group = 1)) +
geom_ribbon(aes(ymin = lower, ymax = upper),
color = "red", fill = "red", linetype = 2, alpha = 0.2, show.legend = FALSE) +
geom_line(aes(y = cfr), color = "red", show.legend = FALSE) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# scale the x axis the same as the incidence curve. Expand forces it to align.
incidence::scale_x_incidence(inc_week_7, n_breaks = nrow(inc_week_7), expand = c(0, 7 * 1.5)) +
# add labels to axes and below chart
labs(x = "Calendar week", y = "CFR [95% CI]",
subtitle = "Case Fatality Ratio [95% CI] Among Inpatients") +
# change visuals of dates and remove legend title
epicurve_theme
nofx <- theme(axis.text.x = element_blank(),
axis.title.x = element_blank())
cowplot::plot_grid(
basic_curve + nofx,
ar_plot + nofx,
cfr_plot,
align = "v", # align plots vertically
axis = "lr", # only by their left and right margins
ncol = 1     # allow only one column
)
ar_plot
ar
ar <- attack_rate(cases$n, population, multiplier = 10000) %>%
bind_cols(select(cases, epiweek), .) # add the epiweek column to table
ar
ar
ar_plot <- ggplot(ar, aes(x = week2date(epiweek) + (7 * 0.5), group = 1)) +
geom_ribbon(aes(ymin = lower, ymax = upper),
color = "blue", fill = "blue", linetype = 2, alpha = 0.2, show.legend = FALSE) +
geom_line(aes(y = ar), color = "blue", show.legend = FALSE) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# scale the x axis the same as the incidence curve. Expand forces it to align.
incidence::scale_x_incidence(inc_week_7, n_breaks = nrow(inc_week_7), expand = c(0, 7 * 1.5)) +
# add labels to axes and below chart
labs(x = "Calendar week", y = "AR [95% CI]", subtitle = "Attack Rate (per 10,000)") +
# change visuals of dates and remove legend title
epicurve_theme
ar_plot
# hide all code chunks in the output, but show errors
knitr::opts_chunk$set(echo = TRUE,       # hide all code chunks in output
error = TRUE,       # show errors if they appear, but don't stop
fig.width = 6*1.25, # Figure width
fig.height = 6      # Figure height
)
# set default NA to - in output, define figure width/height
options(knitr.kable.NA = "-")
# Installing required packages for this template
required_packages <- c("knitr",       # create output docs
"dplyr",       # clean/shape data
"forcats",     # clean/shape data
"stringr",     # clean text
"rio",         # read in data
"ggplot2",     # create plots and charts
"sitrep",      # MSF field epi functions
"linelist",    # Functions for cleaning/standardising data
"incidence",   # create epicurves
"aweek",       # define epi weeks
"epitools",    # 2x2 tables and other epi goodness
"epitrix",     # epi helpers and tricks
"sf",          # encode spatial vector data
"ggspatial")   # plot maps
for (pkg in required_packages) {
# install packages if not already present
if (!pkg %in% rownames(installed.packages())) {
install.packages(pkg)
}
# load packages to this current session
library(pkg, character.only = TRUE)
}
# set default text size to 16 for plots
# give classic black/white axes for plots
ggplot2::theme_set(theme_classic(base_size = 18))
# Set the day that defines the beginning of your epiweek.
# you can start the week on any day of the week
# (the ISO standard is to start on Monday)
aweek::set_week_start("Monday")
date2week("2017-04-20")      #Sys.Date() uses the current date from your computer
reporting_week <- readRDS("data/reporting_week.rds") # Set the reporting week
# Read in the R objects that were defined in previous pages
linelist_cleaned <- readRDS("data/linelist_person_cleaned.rds")
population_data_region <- readRDS("data/population_data.rds")
population <- readRDS("data/population.rds")
SYMPTOMS <- readRDS("data/SYMPTOMS.rds")
LABS <- readRDS("data/LABS.rds")
first_week <- readRDS("data/first_week.rds")
obs_start <- readRDS("data/obs_start.rds")
obs_end <- readRDS("data/obs_end.rds")
# This code creates case counts for each week of your outbreak, overall
# As with aweek, you can change the start of your week to e.g. "Sunday week"
inc_week_7 <- incidence(linelist_cleaned$date_of_onset, interval = "Monday week")
# this sets the theme in ggplot for epicurves
epicurve_theme <- theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "grey60", linetype = 3),
panel.grid.major.y = element_line(color = "grey60", linetype = 3)
)
# This sets the labels in ggplot for the epicurves
epicurve_labels <- labs(x = "Calendar week",
y = "Cases (n)",
title = "Cases by week of onset",
subtitle = sprintf("Source: MSF data from %s", reporting_week)
)
# plot your epicurve as a ggplot (incidence::plot is different to base::plot)
basic_curve <- plot(inc_week_7, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_7)) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates and remove legend title
epicurve_theme
# show your plot (stored for later use)
basic_curve
# Modifies basic_curve to show only 6 breaks in the x-axis
basic_curve + scale_x_incidence(inc_week_7, n_breaks = 6)
# interval is set to "2 Monday weeks" for biweekly case aggregation
inc_week_14 <- incidence(linelist_cleaned$date_of_onset, interval = "2 Monday weeks")
# plot the epicurve
plot(inc_week_14, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_14)) +
scale_y_continuous(expand = c(0,0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates and remove legend title
epicurve_theme
# get counts by gender
inc_week_7_gender <- incidence(linelist_cleaned$date_of_onset,
interval = "2 Monday weeks",
groups = linelist_cleaned$sex)
# plot your epicurve
# here we remove the boxes around each case as it makes gender colours hard to see! (show_cases = FALSE)
plot(inc_week_7_gender, show_cases = FALSE, border = "black", n_breaks = nrow(inc_week_7_gender)) +
scale_y_continuous(expand = c(0,0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates, remove legend title and move legend to bottom
epicurve_theme
# filter the dataset and pass it to the incidence() function
inc_week_7_sex_fac <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
with(incidence(date_of_onset, interval = "2 Monday weeks", groups = sex))
# plot as before
plot(inc_week_7_sex_fac, show_cases = TRUE, border = "black", n_breaks = nrow(inc_week_7_sex_fac)) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# add labels to axes and below chart
epicurve_labels +
# change visuals of dates, remove legend title and move legend to bottom
epicurve_theme
# counts and cumulative counts by week
cases <- linelist_cleaned %>%
arrange(date_of_onset) %>%        # arrange by date of onset
count(epiweek, .drop = FALSE) %>% # count all epiweeks and include zero counts
mutate(cumulative = cumsum(n))    # add a cumulative sum
# attack rate for each week
ar <- attack_rate(cases$n, population, multiplier = 10000) %>%
bind_cols(select(cases, epiweek), .) # add the epiweek column to table
# Display the table
ar %>%
merge_ci_df(e = 4) %>% # merge the lower and upper CI into one column
rename("Epiweek" = epiweek,
"Cases (n)" = cases,
"Population" = population,
"AR (per 10,000)" = ar,
"95%CI" = ci) %>%
knitr::kable(digits = 2, align = "r")
# cumulative attack rate by week
attack_rate(cases$cumulative, population, multiplier = 10000) %>%
bind_cols(select(cases, epiweek), .) %>% # add the epiweek column to table
merge_ci_df(e = 4) %>% # merge the lower and upper CI into one column
rename("Epiweek" = epiweek,
"Cases (n)" = cases,
"Population" = population,
"AR (per 10,000)" = ar,
"95%CI" = ci) %>%
knitr::kable(digits = 2, align = "r")
# group by known outcome and case definition
cfr <- linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
case_fatality_rate_df(grepl("Dead", exit_status), group = epiweek)
cfr %>%
merge_ci_df(e = 4) %>% # merge the lower and upper CI into one column
rename("Epiweek" = epiweek,
"Deaths" = deaths,
"Cases" = population,
"CFR (%)" = cfr,
"95%CI" = ci) %>%
knitr::kable(digits = 2, align = "r")
ar_plot <- ggplot(ar, aes(x = week2date(epiweek) + (7 * 0.5), group = 1)) +
geom_ribbon(aes(ymin = lower, ymax = upper),
color = "blue", fill = "blue", linetype = 2, alpha = 0.2, show.legend = FALSE) +
geom_line(aes(y = ar), color = "blue", show.legend = FALSE) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# scale the x axis the same as the incidence curve. Expand forces it to align.
incidence::scale_x_incidence(inc_week_7, n_breaks = nrow(inc_week_7), expand = c(0, 7 * 1.5)) +
# add labels to axes and below chart
labs(x = "Calendar week", y = "AR [95% CI]", subtitle = "Attack Rate (per 10,000)") +
# change visuals of dates and remove legend title
epicurve_theme
cfr_plot <- ggplot(cfr, aes(x = week2date(epiweek) + (7 * 0.5), group = 1)) +
geom_ribbon(aes(ymin = lower, ymax = upper),
color = "red", fill = "red", linetype = 2, alpha = 0.2, show.legend = FALSE) +
geom_line(aes(y = cfr), color = "red", show.legend = FALSE) +
scale_y_continuous(expand = c(0, 0)) +  # set origin for axes
# scale the x axis the same as the incidence curve. Expand forces it to align.
incidence::scale_x_incidence(inc_week_7, n_breaks = nrow(inc_week_7), expand = c(0, 7 * 1.5)) +
# add labels to axes and below chart
labs(x = "Calendar week", y = "CFR [95% CI]",
subtitle = "Case Fatality Ratio [95% CI] Among Inpatients") +
# change visuals of dates and remove legend title
epicurve_theme
nofx <- theme(axis.text.x = element_blank(),
axis.title.x = element_blank())
cowplot::plot_grid(
basic_curve + nofx,
ar_plot + nofx,
cfr_plot,
align = "v", # align plots vertically
axis = "lr", # only by their left and right margins
ncol = 1     # allow only one column
)
# get counts and props of admissions by epiweek and case definition
# include column and row totals
tab_linelist(linelist_cleaned, epiweek, strata = case_def,
col_total = TRUE,
row_total = TRUE) %>%
select(-variable) %>%
rename_redundant("%" = proportion) %>%
augment_redundant(" (n)" = " n$") %>%
kable(digits = 2)
# get counts and props of admissions by epiweek among inpatients
# include column and row totals
linelist_cleaned %>%
filter(patient_facility_type == "Inpatient") %>%
tab_linelist(epiweek, strata = exit_status2,
col_total = TRUE, row_total = TRUE) %>%
select(-variable) %>%
rename("Week" = value) %>%
rename_redundant("%" = proportion) %>%
augment_redundant(" (n)" = " n$") %>%
kable(digits = 2)
